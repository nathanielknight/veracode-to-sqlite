{
  "_links": {
    "root": {
      "href": "/"
    },
    "self": {
      "href": "/scans/7fd0e276-cc62-4c82-b386-685dd405a226/findings"
    },
    "help": {
      "href": "https://help.veracode.com/reader/tS9CaFwL4_lbIEWWomsJoA/ovfZGgu96UINQxIuTqRDwg"
    }
  },
  "scan_id": "7fd0e276-cc62-4c82-b386-685dd405a226",
  "scan_status": "SUCCESS",
  "message": "Scan successful. Results size: 766761 bytes",
  "modules": [
    "cms/static/xmodule_js/common_static/applets/capa/Protex.jar",
    "cms/static/xmodule_js/common_static/applets/capa/genex.jar",
    "common/lib/xmodule/xmodule/js/common_static/applets/capa/Protex.jar",
    "common/lib/xmodule/xmodule/js/common_static/applets/capa/genex.jar",
    "common/static/applets/capa/Protex.jar",
    "common/static/applets/capa/genex.jar",
    "JS files within edx-platform.zip",
    "lms/static/xmodule_js/common_static/applets/capa/Protex.jar",
    "lms/static/xmodule_js/common_static/applets/capa/genex.jar",
    "Python files within edx-platform.zip"
  ],
  "modules_count": 10,
  "findings": [
    {
      "title": "innerHTML",
      "issue_id": 1010,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/xmodule_js/common_static/js/capa/protex/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1005,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/xmodule_js/common_static/js/capa/jsmolcalc/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1004,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/xmodule_js/common_static/js/capa/jsme/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1003,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/xmodule_js/common_static/js/capa/genex/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "set",
      "issue_id": 1061,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/lms/js/spec/preview/preview_factory_spec.js",
          "line": 115,
          "function_name": "lambda_12",
          "qualified_function_name": "lambda_12",
          "function_prototype": "lambda_12(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2041817128",
        "prototype_hash": "1020911757",
        "flaw_hash": "2811261497",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2920118033",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1102,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/views/LoginView.js",
          "line": 37,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any,  : any,  : any,  : any,  : any,  : any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2542387840",
        "prototype_hash": "3371739439",
        "flaw_hash": "3004431893",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2913210102",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "href",
      "issue_id": 1000,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to href() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/views/HintedLoginView.js",
          "line": 43,
          "function_name": "lambda_6",
          "qualified_function_name": "lambda_6",
          "function_prototype": "lambda_6(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3265938106",
        "prototype_hash": "1678500943",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "href",
      "issue_id": 1024,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to href() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/views/HintedLoginView.js",
          "line": 43,
          "function_name": "lambda_6",
          "qualified_function_name": "lambda_6",
          "function_prototype": "lambda_6(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3265938106",
        "prototype_hash": "1678500943",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2853736140",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "Location.replace",
      "issue_id": 1147,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to Location.replace() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/views/FinishAuthView.js",
          "line": 171,
          "function_name": "lambda_9",
          "qualified_function_name": "lambda_9",
          "function_prototype": "lambda_9(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2158268524",
        "prototype_hash": "2827894392",
        "flaw_hash": "2357148288",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "417020835",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "Location.replace",
      "issue_id": 1146,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to Location.replace() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/views/AccessView.js",
          "line": 334,
          "function_name": "lambda_17",
          "qualified_function_name": "lambda_17",
          "function_prototype": "lambda_17(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3376166143",
        "prototype_hash": "1234609301",
        "flaw_hash": "2357148288",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "417020835",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "href",
      "issue_id": 1022,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to href() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/shoppingcart.js",
          "line": 38,
          "function_name": "lambda_5",
          "qualified_function_name": "lambda_5",
          "function_prototype": "lambda_5(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1357923072",
        "prototype_hash": "2954488620",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "href",
      "issue_id": 1029,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to href() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/shoppingcart.js",
          "line": 38,
          "function_name": "lambda_5",
          "qualified_function_name": "lambda_5",
          "function_prototype": "lambda_5(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1357923072",
        "prototype_hash": "2954488620",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2853736140",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "href",
      "issue_id": 1020,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to href() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/multiple_enterprise.js",
          "line": 62,
          "function_name": "lambda_8",
          "qualified_function_name": "lambda_8",
          "function_prototype": "lambda_8(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "675127473",
        "prototype_hash": "2928420327",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "href",
      "issue_id": 1027,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to href() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/multiple_enterprise.js",
          "line": 62,
          "function_name": "lambda_8",
          "qualified_function_name": "lambda_8",
          "function_prototype": "lambda_8(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "675127473",
        "prototype_hash": "2928420327",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2853736140",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "href",
      "issue_id": 1002,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to href() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/enrollment.js",
          "line": 60,
          "function_name": "lambda_6",
          "qualified_function_name": "lambda_6",
          "function_prototype": "lambda_6(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3265938106",
        "prototype_hash": "1678500943",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "href",
      "issue_id": 1026,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to href() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/enrollment.js",
          "line": 60,
          "function_name": "lambda_6",
          "qualified_function_name": "lambda_6",
          "function_prototype": "lambda_6(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3265938106",
        "prototype_hash": "1678500943",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2853736140",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "set",
      "issue_id": 1065,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/components/spec/PasswordResetConfirmation_spec.js",
          "line": 35,
          "function_name": "triggerValidation",
          "qualified_function_name": "triggerValidation",
          "function_prototype": "triggerValidation(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2638841632",
        "prototype_hash": "1841627144",
        "flaw_hash": "3191238857",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "207323948",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1039,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/student_account/AccountsClient.js",
          "line": 6,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2592800226",
        "prototype_hash": "3590448808",
        "flaw_hash": "3511077932",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "591471625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1067,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/views/fields_spec.js",
          "line": 7,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any,  : any,  : any,  : any,  : any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1887892374",
        "prototype_hash": "3256453198",
        "flaw_hash": "1444997786",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3369092848",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1077,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/views/fields_spec.js",
          "line": 97,
          "function_name": "lambda_8",
          "qualified_function_name": "lambda_8",
          "function_prototype": "lambda_8(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "261997307",
        "prototype_hash": "391610442",
        "flaw_hash": "2319653005",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "835107331",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1106,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/views/fields_helpers.js",
          "line": 14,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any,  : any,  : any,  : any,  : any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054299711",
        "prototype_hash": "727620859",
        "flaw_hash": "1444997786",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3369092848",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1050,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/student_account/utils_spec.js",
          "line": 9,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2836093991",
        "prototype_hash": "3820756066",
        "flaw_hash": "594926669",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "619957505",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1142,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/student_account/register_spec.js",
          "line": 23,
          "function_name": "lambda_3",
          "qualified_function_name": "lambda_3",
          "function_prototype": "lambda_3(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1783152698",
        "prototype_hash": "1111393050",
        "flaw_hash": "2863552049",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3210462980",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1132,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/student_account/register_spec.js",
          "line": 24,
          "function_name": "lambda_3",
          "qualified_function_name": "lambda_3",
          "function_prototype": "lambda_3(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1783152698",
        "prototype_hash": "1111393050",
        "flaw_hash": "2959761520",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1397988534",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1055,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/student_account/multiple_enterprise_spec.js",
          "line": 18,
          "function_name": "lambda_3",
          "qualified_function_name": "lambda_3",
          "function_prototype": "lambda_3(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1389830423",
        "prototype_hash": "1111393050",
        "flaw_hash": "2991152580",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1161237951",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1124,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/student_account/login_spec.js",
          "line": 25,
          "function_name": "lambda_3",
          "qualified_function_name": "lambda_3",
          "function_prototype": "lambda_3(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2790423473",
        "prototype_hash": "1111393050",
        "flaw_hash": "2959761520",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1397988534",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1116,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/student_account/helpers.js",
          "line": 96,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3908129779",
        "prototype_hash": "1528466117",
        "flaw_hash": "998283117",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2433347037",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1068,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/instructor_dashboard/membership_spec.js",
          "line": 38,
          "function_name": "lambda_9",
          "qualified_function_name": "lambda_9",
          "function_prototype": "lambda_9(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "380000124",
        "prototype_hash": "3552285535",
        "flaw_hash": "309534942",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3495467125",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1046,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/instructor_dashboard/membership_spec.js",
          "line": 72,
          "function_name": "lambda_13",
          "qualified_function_name": "lambda_13",
          "function_prototype": "lambda_13(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1635604654",
        "prototype_hash": "2216640361",
        "flaw_hash": "3045723571",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3861303959",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1037,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/instructor_dashboard/membership_auth_spec.js",
          "line": 48,
          "function_name": "lambda_5",
          "qualified_function_name": "lambda_5",
          "function_prototype": "lambda_5(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4081890685",
        "prototype_hash": "2972680933",
        "flaw_hash": "3384524049",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3977039656",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1096,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/instructor_dashboard/membership_auth_spec.js",
          "line": 103,
          "function_name": "lambda_7",
          "qualified_function_name": "lambda_7",
          "function_prototype": "lambda_7(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3472674288",
        "prototype_hash": "2902181169",
        "flaw_hash": "3384524049",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3977039656",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1087,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/instructor_dashboard/data_download_spec.js",
          "line": 107,
          "function_name": "lambda_7",
          "qualified_function_name": "lambda_7",
          "function_prototype": "lambda_7(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "339368805",
        "prototype_hash": "2902181169",
        "flaw_hash": "370814340",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "18864223",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1041,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/instructor_dashboard/certificates_exception_spec.js",
          "line": 416,
          "function_name": "lambda_24",
          "qualified_function_name": "lambda_24",
          "function_prototype": "lambda_24(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "694055737",
        "prototype_hash": "3145235673",
        "flaw_hash": "950077992",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "67801332",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1086,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/groups/views/cohorts_spec.js",
          "line": 816,
          "function_name": "lambda_72",
          "qualified_function_name": "lambda_72",
          "function_prototype": "lambda_72(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1023704818",
        "prototype_hash": "1460005968",
        "flaw_hash": "2738156602",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2350880019",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1075,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/groups/views/cohorts_spec.js",
          "line": 817,
          "function_name": "lambda_72",
          "qualified_function_name": "lambda_72",
          "function_prototype": "lambda_72(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1023704818",
        "prototype_hash": "1460005968",
        "flaw_hash": "2650554949",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1292289387",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1098,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/groups/views/cohorts_spec.js",
          "line": 818,
          "function_name": "lambda_72",
          "qualified_function_name": "lambda_72",
          "function_prototype": "lambda_72(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1023704818",
        "prototype_hash": "1460005968",
        "flaw_hash": "4220137661",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3784590493",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1117,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/spec/financial-assistance/financial_assistance_form_view_spec.js",
          "line": 95,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "122355749",
        "prototype_hash": "3820756066",
        "flaw_hash": "1230578238",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4219076598",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1157,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/pending_tasks.js",
          "line": 26,
          "function_name": "lambda_5",
          "qualified_function_name": "lambda_5",
          "function_prototype": "lambda_5(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3639782811",
        "prototype_hash": "1228445119",
        "flaw_hash": "2386941807",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "250783164",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1158,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/modules/tab.js",
          "line": 17,
          "function_name": "lambda_5",
          "qualified_function_name": "lambda_5",
          "function_prototype": "lambda_5(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3639782811",
        "prototype_hash": "1228445119",
        "flaw_hash": "2386941807",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "250783164",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "href",
      "issue_id": 1001,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to href() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/learner_dashboard/views/course_enroll_view.js",
          "line": 104,
          "function_name": "redirect",
          "qualified_function_name": "CourseEnrollView.redirect",
          "function_prototype": "redirect(: ::CourseEnrollView,  : any, ...) : any",
          "scope": "^::CourseEnrollView"
        }
      },
      "flaw_match": {
        "procedure_hash": "471954487",
        "prototype_hash": "960543605",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "href",
      "issue_id": 1025,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to href() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/learner_dashboard/views/course_enroll_view.js",
          "line": 104,
          "function_name": "redirect",
          "qualified_function_name": "CourseEnrollView.redirect",
          "function_prototype": "redirect(: ::CourseEnrollView,  : any, ...) : any",
          "scope": "^::CourseEnrollView"
        }
      },
      "flaw_match": {
        "procedure_hash": "471954487",
        "prototype_hash": "960543605",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2853736140",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "set",
      "issue_id": 1093,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/demographics_collection/DemographicsCollectionModal.jsx",
          "line": 100,
          "function_name": "handleSelectChange",
          "qualified_function_name": "DemographicsCollectionModal.handleSelectChange",
          "function_prototype": "handleSelectChange(: ::DemographicsCollectionModal,  : any, ...) : any",
          "scope": "^::DemographicsCollectionModal"
        }
      },
      "flaw_match": {
        "procedure_hash": "2523834723",
        "prototype_hash": "3417082203",
        "flaw_hash": "3263989638",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1084689137",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1031,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/demographics_collection/DemographicsCollectionModal.jsx",
          "line": 189,
          "function_name": "getDemographicsData",
          "qualified_function_name": "DemographicsCollectionModal.getDemographicsData",
          "function_prototype": "getDemographicsData(: ::DemographicsCollectionModal, ...) : any",
          "scope": "^::DemographicsCollectionModal"
        }
      },
      "flaw_match": {
        "procedure_hash": "1249061553",
        "prototype_hash": "775833233",
        "flaw_hash": "3263989638",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1084689137",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1083,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/demographics_collection/DemographicsCollectionModal.jsx",
          "line": 222,
          "function_name": "createDemographicsEntry",
          "qualified_function_name": "DemographicsCollectionModal.createDemographicsEntry",
          "function_prototype": "createDemographicsEntry(: ::DemographicsCollectionModal, ...) : any",
          "scope": "^::DemographicsCollectionModal"
        }
      },
      "flaw_match": {
        "procedure_hash": "1790603361",
        "prototype_hash": "3500545113",
        "flaw_hash": "3263989638",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1084689137",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1040,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/js/demographics_collection/DemographicsCollectionBanner.jsx",
          "line": 35,
          "function_name": "dismissBanner",
          "qualified_function_name": "DemographicsCollectionBanner.dismissBanner",
          "function_prototype": "dismissBanner(: ::DemographicsCollectionBanner,  : any, ...) : any",
          "scope": "^::DemographicsCollectionBanner"
        }
      },
      "flaw_match": {
        "procedure_hash": "2980349686",
        "prototype_hash": "1122031529",
        "flaw_hash": "3263989638",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1084689137",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "href",
      "issue_id": 1021,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to href() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/course_search/js/views/search_item_view.js",
          "line": 69,
          "function_name": "lambda_6",
          "qualified_function_name": "lambda_6",
          "function_prototype": "lambda_6(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3265938106",
        "prototype_hash": "1678500943",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "href",
      "issue_id": 1028,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to href() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/course_search/js/views/search_item_view.js",
          "line": 69,
          "function_name": "lambda_6",
          "qualified_function_name": "lambda_6",
          "function_prototype": "lambda_6(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3265938106",
        "prototype_hash": "1678500943",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2853736140",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "href",
      "issue_id": 1023,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to href() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/static/course_experience/js/Enrollment.js",
          "line": 11,
          "function_name": "redirect",
          "qualified_function_name": "CourseEnrollment.redirect",
          "function_prototype": "redirect(: ::CourseEnrollment,  : any, ...) : any",
          "scope": "^::CourseEnrollment"
        }
      },
      "flaw_match": {
        "procedure_hash": "2197217107",
        "prototype_hash": "2866939982",
        "flaw_hash": "478771012",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2853736140",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "set",
      "issue_id": 1038,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_profile_header_actions_spec.js",
          "line": 109,
          "function_name": "lambda_11",
          "qualified_function_name": "lambda_11",
          "function_prototype": "lambda_11(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1174312510",
        "prototype_hash": "1370482584",
        "flaw_hash": "1215800549",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "132104769",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1063,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_profile_header_actions_spec.js",
          "line": 159,
          "function_name": "lambda_12",
          "qualified_function_name": "lambda_12",
          "function_prototype": "lambda_12(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3355749013",
        "prototype_hash": "1020911757",
        "flaw_hash": "1215800549",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "132104769",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1048,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_profile_header_actions_spec.js",
          "line": 202,
          "function_name": "lambda_14",
          "qualified_function_name": "lambda_14",
          "function_prototype": "lambda_14(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1593993241",
        "prototype_hash": "2534668425",
        "flaw_hash": "1215800549",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "132104769",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1078,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_profile_header_actions_spec.js",
          "line": 235,
          "function_name": "lambda_15",
          "qualified_function_name": "lambda_15",
          "function_prototype": "lambda_15(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3143894796",
        "prototype_hash": "3137511503",
        "flaw_hash": "1215800549",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "132104769",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1049,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_profile_header_actions_spec.js",
          "line": 268,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1863878594",
        "prototype_hash": "2096307924",
        "flaw_hash": "1215800549",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "132104769",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1081,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 130,
          "function_name": "lambda_15",
          "qualified_function_name": "lambda_15",
          "function_prototype": "lambda_15(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1447571871",
        "prototype_hash": "3137511503",
        "flaw_hash": "733083769",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3091218945",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1071,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 133,
          "function_name": "lambda_15",
          "qualified_function_name": "lambda_15",
          "function_prototype": "lambda_15(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1447571871",
        "prototype_hash": "3137511503",
        "flaw_hash": "1140269459",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1978595957",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1082,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 139,
          "function_name": "lambda_15",
          "qualified_function_name": "lambda_15",
          "function_prototype": "lambda_15(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1447571871",
        "prototype_hash": "3137511503",
        "flaw_hash": "1140269459",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1978595957",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1090,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 140,
          "function_name": "lambda_15",
          "qualified_function_name": "lambda_15",
          "function_prototype": "lambda_15(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1447571871",
        "prototype_hash": "3137511503",
        "flaw_hash": "733083769",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3091218945",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1110,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 147,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "847215395",
        "prototype_hash": "2096307924",
        "flaw_hash": "733083769",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3091218945",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1111,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 150,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "847215395",
        "prototype_hash": "2096307924",
        "flaw_hash": "1140269459",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1978595957",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1047,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 153,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "847215395",
        "prototype_hash": "2096307924",
        "flaw_hash": "2219145645",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2641643816",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1101,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 156,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "847215395",
        "prototype_hash": "2096307924",
        "flaw_hash": "710180495",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "415670278",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1062,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 159,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "847215395",
        "prototype_hash": "2096307924",
        "flaw_hash": "661147112",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2672773868",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1108,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 162,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "847215395",
        "prototype_hash": "2096307924",
        "flaw_hash": "3418744149",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1902755503",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1073,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 168,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "847215395",
        "prototype_hash": "2096307924",
        "flaw_hash": "1140269459",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1978595957",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1091,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 169,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "847215395",
        "prototype_hash": "2096307924",
        "flaw_hash": "661147112",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2672773868",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1072,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 170,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "847215395",
        "prototype_hash": "2096307924",
        "flaw_hash": "3418744149",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1902755503",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1085,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 171,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "847215395",
        "prototype_hash": "2096307924",
        "flaw_hash": "2219145645",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2641643816",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1107,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/team_card_spec.js",
          "line": 172,
          "function_name": "lambda_16",
          "qualified_function_name": "lambda_16",
          "function_prototype": "lambda_16(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "847215395",
        "prototype_hash": "2096307924",
        "flaw_hash": "710180495",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "415670278",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1088,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/teams/static/teams/js/spec/views/edit_team_members_spec.js",
          "line": 18,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1687678159",
        "prototype_hash": "3820756066",
        "flaw_hash": "3445216602",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2381679648",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1051,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/static/support/jsx/entitlements/data/api/client.js",
          "line": 14,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1021618063",
        "prototype_hash": "4213019708",
        "flaw_hash": "3511077932",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "591471625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1074,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/static/support/jsx/entitlements/data/api/client.js",
          "line": 21,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2704406488",
        "prototype_hash": "1311580595",
        "flaw_hash": "3511077932",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "591471625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1033,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/static/support/jsx/entitlements/data/api/client.js",
          "line": 39,
          "function_name": "lambda_3",
          "qualified_function_name": "lambda_3",
          "function_prototype": "lambda_3(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4208098399",
        "prototype_hash": "1560314506",
        "flaw_hash": "3511077932",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "591471625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1099,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/static/support/js/spec/views/certificates_spec.js",
          "line": 13,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "104928946",
        "prototype_hash": "3820756066",
        "flaw_hash": "998283117",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2433347037",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1109,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/static/support/js/spec/views/certificates_spec.js",
          "line": 24,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "104928946",
        "prototype_hash": "3820756066",
        "flaw_hash": "998283117",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2433347037",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1112,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/static/support/js/spec/views/certificates_spec.js",
          "line": 38,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "104928946",
        "prototype_hash": "3820756066",
        "flaw_hash": "998283117",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2433347037",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1058,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/static/support/js/spec/views/certificates_spec.js",
          "line": 193,
          "function_name": "lambda_14",
          "qualified_function_name": "lambda_14",
          "function_prototype": "lambda_14(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1359286263",
        "prototype_hash": "2534668425",
        "flaw_hash": "998283117",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2433347037",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1042,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/static/support/js/spec/views/certificates_spec.js",
          "line": 216,
          "function_name": "lambda_15",
          "qualified_function_name": "lambda_15",
          "function_prototype": "lambda_15(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2516714700",
        "prototype_hash": "3137511503",
        "flaw_hash": "998283117",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2433347037",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1059,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/static/instructor/ProblemBrowser/data/api/client.js",
          "line": 15,
          "function_name": "initiateProblemResponsesRequest",
          "qualified_function_name": "initiateProblemResponsesRequest",
          "function_prototype": "initiateProblemResponsesRequest(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "734611974",
        "prototype_hash": "2060495657",
        "flaw_hash": "3511077932",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "591471625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1060,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/static/instructor/ProblemBrowser/data/api/client.js",
          "line": 25,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "354557148",
        "prototype_hash": "429533158",
        "flaw_hash": "3511077932",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "591471625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1032,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/static/instructor/ProblemBrowser/data/api/client.js",
          "line": 37,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "335211166",
        "prototype_hash": "1404635445",
        "flaw_hash": "3511077932",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "591471625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1014,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "common/static/js/capa/protex/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1018,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "common/static/js/capa/jsmolcalc/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1016,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "common/static/js/capa/jsme/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1015,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "common/static/js/capa/genex/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1017,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/js/common_static/js/capa/protex/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1007,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/js/common_static/js/capa/jsmolcalc/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1006,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/js/common_static/js/capa/jsme/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1008,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/js/common_static/js/capa/genex/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1153,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/src/sequence/display.js",
          "line": 69,
          "function_name": "lambda_13",
          "qualified_function_name": "lambda_13",
          "function_prototype": "lambda_13(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2562804924",
        "prototype_hash": "1844259879",
        "flaw_hash": "2386941807",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "250783164",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1154,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/src/html/display.js",
          "line": 19,
          "function_name": "lambda_3",
          "qualified_function_name": "lambda_3",
          "function_prototype": "lambda_3(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "743492526",
        "prototype_hash": "1907782252",
        "flaw_hash": "2386941807",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "250783164",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1155,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/src/capa/display.js",
          "line": 147,
          "function_name": "lambda_37",
          "qualified_function_name": "lambda_37",
          "function_prototype": "lambda_37(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "289337223",
        "prototype_hash": "2591078690",
        "flaw_hash": "2386941807",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "250783164",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1156,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/src/annotatable/display.js",
          "line": 58,
          "function_name": "lambda_5",
          "qualified_function_name": "lambda_5",
          "function_prototype": "lambda_5(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3639782811",
        "prototype_hash": "1228445119",
        "flaw_hash": "2386941807",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "250783164",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.load",
      "issue_id": 1160,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.load() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/common_static/js/vendor/annotator.js",
          "line": 1106,
          "function_name": "lambda_103",
          "qualified_function_name": "lambda_103",
          "function_prototype": "lambda_103(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1783122187",
        "prototype_hash": "3291920262",
        "flaw_hash": "2357148288",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "417020835",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1013,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/common_static/js/capa/protex/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "src",
      "issue_id": 1019,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to src() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/common_static/js/capa/jsmolcalc/jsmolcalc.nocache.js",
          "line": 63,
          "function_name": "ensureAbsoluteUrl",
          "qualified_function_name": "ensureAbsoluteUrl",
          "function_prototype": "ensureAbsoluteUrl(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3089233168",
        "prototype_hash": "1095578825",
        "flaw_hash": "4217671565",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3085692323",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2723860199",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "Location.replace",
      "issue_id": 1148,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to Location.replace() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/common_static/js/capa/jsmolcalc/jsmolcalc.nocache.js",
          "line": 228,
          "function_name": "maybeInjectFrame",
          "qualified_function_name": "maybeInjectFrame",
          "function_prototype": "maybeInjectFrame(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1742334099",
        "prototype_hash": "3502094209",
        "flaw_hash": "1028133854",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4067960541",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "711699199",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1009,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/common_static/js/capa/jsmolcalc/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1011,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/common_static/js/capa/jsme/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "innerHTML",
      "issue_id": 1012,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to innerHTML() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/common_static/js/capa/genex/hosted.html",
          "line": 175,
          "function_name": "__gwt_displayGlassMessage",
          "qualified_function_name": "__gwt_displayGlassMessage",
          "function_prototype": "__gwt_displayGlassMessage(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3754749579",
        "prototype_hash": "1627238337",
        "flaw_hash": "18347015",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2565833630",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3165298725",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1159,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/views/video_transcripts.js",
          "line": 196,
          "function_name": "lambda_12",
          "qualified_function_name": "lambda_12",
          "function_prototype": "lambda_12(: any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "126440421",
        "prototype_hash": "56662653",
        "flaw_hash": "3075508693",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1732126437",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "438364638",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "set",
      "issue_id": 1094,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/pages/library_users_spec.js",
          "line": 32,
          "function_name": "lambda_4",
          "qualified_function_name": "lambda_4",
          "function_prototype": "lambda_4(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "585666731",
        "prototype_hash": "469130359",
        "flaw_hash": "3972659664",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "212716853",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1054,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/pages/library_users_spec.js",
          "line": 33,
          "function_name": "lambda_4",
          "qualified_function_name": "lambda_4",
          "function_prototype": "lambda_4(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "585666731",
        "prototype_hash": "469130359",
        "flaw_hash": "1790535247",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1287185548",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1095,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/pages/library_users_spec.js",
          "line": 34,
          "function_name": "lambda_4",
          "qualified_function_name": "lambda_4",
          "function_prototype": "lambda_4(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "585666731",
        "prototype_hash": "469130359",
        "flaw_hash": "2236676076",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2442072290",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1089,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/pages/library_users_spec.js",
          "line": 127,
          "function_name": "lambda_14",
          "qualified_function_name": "lambda_14",
          "function_prototype": "lambda_14(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2749826499",
        "prototype_hash": "2534668425",
        "flaw_hash": "3972659664",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "212716853",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1045,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/pages/library_users_spec.js",
          "line": 128,
          "function_name": "lambda_14",
          "qualified_function_name": "lambda_14",
          "function_prototype": "lambda_14(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2749826499",
        "prototype_hash": "2534668425",
        "flaw_hash": "1790535247",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1287185548",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1092,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/pages/library_users_spec.js",
          "line": 129,
          "function_name": "lambda_14",
          "qualified_function_name": "lambda_14",
          "function_prototype": "lambda_14(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2749826499",
        "prototype_hash": "2534668425",
        "flaw_hash": "2236676076",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2442072290",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1137,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/course_video_settings_spec.js",
          "line": 7,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4096966426",
        "prototype_hash": "3820756066",
        "flaw_hash": "1232947848",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2061153496",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1052,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/course_video_settings_spec.js",
          "line": 687,
          "function_name": "lambda_47",
          "qualified_function_name": "lambda_47",
          "function_prototype": "lambda_47(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2276845350",
        "prototype_hash": "3581312573",
        "flaw_hash": "124194202",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3631980736",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1043,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/course_video_settings_spec.js",
          "line": 698,
          "function_name": "lambda_48",
          "qualified_function_name": "lambda_48",
          "function_prototype": "lambda_48(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2754182032",
        "prototype_hash": "379332212",
        "flaw_hash": "3421484849",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1211137673",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1034,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/course_video_settings_spec.js",
          "line": 756,
          "function_name": "lambda_52",
          "qualified_function_name": "lambda_52",
          "function_prototype": "lambda_52(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1423944857",
        "prototype_hash": "897210513",
        "flaw_hash": "2661618637",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2744171878",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1035,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/course_video_settings_spec.js",
          "line": 770,
          "function_name": "lambda_53",
          "qualified_function_name": "lambda_53",
          "function_prototype": "lambda_53(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3533444255",
        "prototype_hash": "1128511624",
        "flaw_hash": "3367565608",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4149458196",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1053,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/course_video_settings_spec.js",
          "line": 781,
          "function_name": "lambda_54",
          "qualified_function_name": "lambda_54",
          "function_prototype": "lambda_54(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1965385615",
        "prototype_hash": "3351939444",
        "flaw_hash": "2661618637",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2744171878",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1036,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/spec/views/course_video_settings_spec.js",
          "line": 793,
          "function_name": "lambda_55",
          "qualified_function_name": "lambda_55",
          "function_prototype": "lambda_55(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1281107441",
        "prototype_hash": "590487423",
        "flaw_hash": "2661618637",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2744171878",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1121,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/zh-tw/djangojs.js",
          "line": 749,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1986030669",
        "prototype_hash": "3364913095",
        "flaw_hash": "1065755163",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3501337074",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1097,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/zh-cn/djangojs.js",
          "line": 1851,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1385673952",
        "prototype_hash": "3364913095",
        "flaw_hash": "2546699291",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1737434965",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1136,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/vi/djangojs.js",
          "line": 1518,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1988196105",
        "prototype_hash": "3364913095",
        "flaw_hash": "4127658059",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3613680990",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1139,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/uk/djangojs.js",
          "line": 1300,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2490841630",
        "prototype_hash": "3364913095",
        "flaw_hash": "2842732892",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3889967890",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1126,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/tr-tr/djangojs.js",
          "line": 1220,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3405218393",
        "prototype_hash": "3364913095",
        "flaw_hash": "2930575385",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "777788502",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1143,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/tr-tr/djangojs.js",
          "line": 1976,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3405218393",
        "prototype_hash": "3364913095",
        "flaw_hash": "2429950064",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3061416155",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1119,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/th/djangojs.js",
          "line": 613,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "279438528",
        "prototype_hash": "3364913095",
        "flaw_hash": "2337485092",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "468266358",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1131,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/sk/djangojs.js",
          "line": 516,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3703244751",
        "prototype_hash": "3364913095",
        "flaw_hash": "2579225948",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2371938518",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1120,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/ru/djangojs.js",
          "line": 1681,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3188602052",
        "prototype_hash": "3364913095",
        "flaw_hash": "523348703",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "529126455",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1105,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/rtl/djangojs.js",
          "line": 1162,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347487406",
        "prototype_hash": "3364913095",
        "flaw_hash": "2136492336",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1944132739",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1103,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/rtl/djangojs.js",
          "line": 1923,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347487406",
        "prototype_hash": "3364913095",
        "flaw_hash": "2713743827",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1893206695",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1129,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/pt-br/djangojs.js",
          "line": 899,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1151618253",
        "prototype_hash": "3364913095",
        "flaw_hash": "4010217407",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "752133344",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1122,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/pl/djangojs.js",
          "line": 1428,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2813248013",
        "prototype_hash": "3364913095",
        "flaw_hash": "3790159691",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1759704294",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1114,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/mn/djangojs.js",
          "line": 289,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "405564426",
        "prototype_hash": "3364913095",
        "flaw_hash": "2984897158",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3481400669",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1128,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/mn/djangojs.js",
          "line": 445,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "405564426",
        "prototype_hash": "3364913095",
        "flaw_hash": "565172185",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "891220248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1118,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/lt-lt/djangojs.js",
          "line": 593,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2225849199",
        "prototype_hash": "3364913095",
        "flaw_hash": "3972595463",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2736591736",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1104,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/ko-kr/djangojs.js",
          "line": 321,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2237487796",
        "prototype_hash": "3364913095",
        "flaw_hash": "522520793",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1684764594",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1127,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/ja-jp/djangojs.js",
          "line": 779,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "134691129",
        "prototype_hash": "3364913095",
        "flaw_hash": "2137274269",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "439124202",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1076,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/ja-jp/djangojs.js",
          "line": 1308,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "134691129",
        "prototype_hash": "3364913095",
        "flaw_hash": "667911714",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2874180063",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1080,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/it-it/djangojs.js",
          "line": 743,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3136030030",
        "prototype_hash": "3364913095",
        "flaw_hash": "1865727992",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4208819565",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1138,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/id/djangojs.js",
          "line": 936,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2621800135",
        "prototype_hash": "3364913095",
        "flaw_hash": "2277263155",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3210213784",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1141,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/id/djangojs.js",
          "line": 1534,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2621800135",
        "prototype_hash": "3364913095",
        "flaw_hash": "2638344317",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3770869953",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1123,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/he/djangojs.js",
          "line": 1393,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3749389655",
        "prototype_hash": "3364913095",
        "flaw_hash": "956164206",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "810852888",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1140,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/fr/djangojs.js",
          "line": 1641,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3159957515",
        "prototype_hash": "3364913095",
        "flaw_hash": "541783129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3055116918",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1079,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/fake2/djangojs.js",
          "line": 1162,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1878427583",
        "prototype_hash": "3364913095",
        "flaw_hash": "2029031103",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1096303184",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1133,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/fake2/djangojs.js",
          "line": 1923,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1878427583",
        "prototype_hash": "3364913095",
        "flaw_hash": "185579638",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2732194224",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1145,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/eu-es/djangojs.js",
          "line": 1292,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "712012593",
        "prototype_hash": "3364913095",
        "flaw_hash": "410689134",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1808691097",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1066,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/es-419/djangojs.js",
          "line": 2036,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1708894720",
        "prototype_hash": "3364913095",
        "flaw_hash": "2096356443",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1230598430",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1144,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/eo/djangojs.js",
          "line": 2066,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1346641947",
        "prototype_hash": "3364913095",
        "flaw_hash": "2492228087",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "882821869",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1084,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/el/djangojs.js",
          "line": 343,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4137500304",
        "prototype_hash": "3364913095",
        "flaw_hash": "177607752",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3497782677",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1113,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/de-de/djangojs.js",
          "line": 2049,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1970225007",
        "prototype_hash": "3364913095",
        "flaw_hash": "4103716506",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1424834479",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1134,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/ca@valencia/djangojs.js",
          "line": 645,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3394785813",
        "prototype_hash": "3364913095",
        "flaw_hash": "1795685541",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3453524359",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1100,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/ca@valencia/djangojs.js",
          "line": 1044,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3394785813",
        "prototype_hash": "3364913095",
        "flaw_hash": "3827392824",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "51160964",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1130,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/ca/djangojs.js",
          "line": 645,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2736691837",
        "prototype_hash": "3364913095",
        "flaw_hash": "1795685541",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3453524359",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1135,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/ca/djangojs.js",
          "line": 1044,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2736691837",
        "prototype_hash": "3364913095",
        "flaw_hash": "3827392824",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "51160964",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1115,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/ar/djangojs.js",
          "line": 841,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3280057769",
        "prototype_hash": "3364913095",
        "flaw_hash": "1351363444",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "750125948",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1125,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/js/i18n/ar/djangojs.js",
          "line": 1373,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3280057769",
        "prototype_hash": "3364913095",
        "flaw_hash": "1273222711",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1593958520",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1044,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/common/js/spec_helpers/discussion_spec_helper.js",
          "line": 18,
          "function_name": "lambda_4",
          "qualified_function_name": "lambda_4",
          "function_prototype": "lambda_4(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3380517753",
        "prototype_hash": "2021749313",
        "flaw_hash": "2811261497",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2920118033",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1056,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/common/js/spec/discussion/view/thread_response_show_view_spec.js",
          "line": 62,
          "function_name": "lambda_11",
          "qualified_function_name": "lambda_11",
          "function_prototype": "lambda_11(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "317703334",
        "prototype_hash": "1370482584",
        "flaw_hash": "3477934067",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "981497129",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1064,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/common/js/spec/discussion/view/thread_response_show_view_spec.js",
          "line": 95,
          "function_name": "lambda_13",
          "qualified_function_name": "lambda_13",
          "function_prototype": "lambda_13(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3544467642",
        "prototype_hash": "3844281856",
        "flaw_hash": "3477934067",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "981497129",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1057,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/common/js/spec/discussion/view/thread_response_show_view_spec.js",
          "line": 231,
          "function_name": "lambda_25",
          "qualified_function_name": "lambda_25",
          "function_prototype": "lambda_25(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "221958283",
        "prototype_hash": "3624602141",
        "flaw_hash": "3477934067",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "981497129",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "set",
      "issue_id": 1069,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. set\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/common/js/spec/discussion/view/discussion_thread_list_view_spec.js",
          "line": 660,
          "function_name": "lambda_77",
          "qualified_function_name": "lambda_77",
          "function_prototype": "lambda_77(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2136894312",
        "prototype_hash": "2143696328",
        "flaw_hash": "2897481381",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4226794441",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/798.html"
    },
    {
      "title": "location",
      "issue_id": 1030,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to location() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/common/js/components/utils/view_utils.js",
          "line": 181,
          "function_name": "lambda_21",
          "qualified_function_name": "lambda_21",
          "function_prototype": "lambda_21(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4271743088",
        "prototype_hash": "288764581",
        "flaw_hash": "3734439054",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "set",
      "issue_id": 1070,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/common/js/components/BlockBrowser/data/api/client.js",
          "line": 30,
          "function_name": "lambda_3",
          "qualified_function_name": "lambda_3",
          "function_prototype": "lambda_3(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "283036572",
        "prototype_hash": "3726993874",
        "flaw_hash": "3511077932",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "591471625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "XMLHttpRequest.send",
      "issue_id": 1152,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through Sent Data",
      "cwe_id": "201",
      "display_text": "\u003cspan\u003e The application calls the XMLHttpRequest.send() function, which will result in data being transferred out of the application (via the network or another medium).  In this case, the message being sent contains local file data.  \u003c/span\u003e \u003cspan\u003eEnsure that the transfer of the sensitive data is intended and that it does not violate application security policy.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/201.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Information-Leakage\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/static/support/jsx/file_upload.jsx",
          "line": 79,
          "function_name": "success",
          "qualified_function_name": "success",
          "function_prototype": "success(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3426713232",
        "prototype_hash": "1041040073",
        "flaw_hash": "3103718343",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2323626286",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "438364638",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/201.html"
    },
    {
      "title": "Location.replace",
      "issue_id": 1151,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through Sent Data",
      "cwe_id": "201",
      "display_text": "\u003cspan\u003e The application calls the Location.replace() function, which will result in data being transferred out of the application (via the network or another medium).  In this case, the message being sent appears to be considered private; this may include credentials such as usernames or passwords, data normally stored in cryptographically-protected vaults such as keychains, or other private information.  \u003c/span\u003e \u003cspan\u003eEnsure that the transfer of the sensitive data is intended and that it does not violate application security policy.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/201.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Information-Leakage\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/common_static/js/vendor/CodeMirror/addons/search.js",
          "line": 110,
          "function_name": "lambda_10",
          "qualified_function_name": "lambda_10",
          "function_prototype": "lambda_10(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1203083117",
        "prototype_hash": "2720053283",
        "flaw_hash": "1566013295",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1647312977",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3071062675",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/201.html"
    },
    {
      "title": "Location.replace",
      "issue_id": 1149,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through Sent Data",
      "cwe_id": "201",
      "display_text": "\u003cspan\u003e The application calls the Location.replace() function, which will result in data being transferred out of the application (via the network or another medium).  In this case, the message being sent appears to be considered private; this may include credentials such as usernames or passwords, data normally stored in cryptographically-protected vaults such as keychains, or other private information.  \u003c/span\u003e \u003cspan\u003eEnsure that the transfer of the sensitive data is intended and that it does not violate application security policy.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/201.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Information-Leakage\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/common_static/js/vendor/CodeMirror/addons/search.js",
          "line": 111,
          "function_name": "lambda_10",
          "qualified_function_name": "lambda_10",
          "function_prototype": "lambda_10(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1203083117",
        "prototype_hash": "2720053283",
        "flaw_hash": "2560374387",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "61553967",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/201.html"
    },
    {
      "title": "Location.replace",
      "issue_id": 1150,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through Sent Data",
      "cwe_id": "201",
      "display_text": "\u003cspan\u003e The application calls the Location.replace() function, which will result in data being transferred out of the application (via the network or another medium).  In this case, the message being sent appears to be considered private; this may include credentials such as usernames or passwords, data normally stored in cryptographically-protected vaults such as keychains, or other private information.  \u003c/span\u003e \u003cspan\u003eEnsure that the transfer of the sensitive data is intended and that it does not violate application security policy.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/201.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Information-Leakage\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cms/static/xmodule_js/common_static/js/vendor/CodeMirror/addons/search.js",
          "line": 130,
          "function_name": "lambda_14",
          "qualified_function_name": "lambda_14",
          "function_prototype": "lambda_14(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2515069665",
        "prototype_hash": "2355713693",
        "flaw_hash": "575213998",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1565153760",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/201.html"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "pavelib/prereqs.py",
          "function_name": "compute_fingerprint",
          "function_prototype": "",
          "line": 70,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1000,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "pavelib/prereqs.py",
          "function_name": "uninstall_python_packages",
          "function_prototype": "",
          "line": 223,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1001,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "pavelib/paver_tests/test_extract_and_generate.py",
          "function_name": "random_name",
          "function_prototype": "",
          "line": 118,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1002,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "selenium/testcases/Signup.py",
          "function_name": "run",
          "function_prototype": "",
          "line": 15,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1003,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "selenium/testcases/Signup.py",
          "function_name": "run",
          "function_prototype": "",
          "line": 16,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1004,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "selenium/testcases/Signup.py",
          "function_name": "run",
          "function_prototype": "",
          "line": 17,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1005,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "selenium/testcases/Signup.py",
          "function_name": "run",
          "function_prototype": "",
          "line": 18,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1006,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/edxmako/paths.py",
          "function_name": "add_directory",
          "function_prototype": "",
          "line": 57,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1007,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/student/models.py",
          "function_name": "generate_enrollment_status_hash",
          "function_prototype": "",
          "line": 1812,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1008,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/util/db.py",
          "function_name": "generate_int_id",
          "function_prototype": "",
          "line": 148,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1009,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/util/db.py",
          "function_name": "generate_int_id",
          "function_prototype": "",
          "line": 151,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1010,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.new() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/util/memcache.py",
          "function_name": "fasthash",
          "function_prototype": "",
          "line": 17,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1011,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/bulk_email/tasks.py",
          "function_name": "_submit_for_retry",
          "function_prototype": "",
          "line": 798,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1012,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/certificates/generation.py",
          "function_name": "_generate_certificate",
          "function_prototype": "",
          "line": 68,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1013,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/certificates/queue.py",
          "function_name": "_generate_cert",
          "function_prototype": "",
          "line": 412,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1014,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/email_marketing/signals.py",
          "function_name": "_create_sailthru_user_vars",
          "function_prototype": "",
          "line": 293,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1015,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/experiments/stable_bucketing.py",
          "function_name": "stable_bucketing_hash_group",
          "function_prototype": "",
          "line": 30,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1016,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/grades/models.py",
          "function_name": "hash_value",
          "function_prototype": "",
          "line": 79,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1017,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/grades/transformer.py",
          "function_name": "grading_policy_hash",
          "function_prototype": "",
          "line": 96,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1018,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor_task/api.py",
          "function_name": "submit_bulk_course_email",
          "function_prototype": "",
          "line": 323,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1019,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor_task/api_helper.py",
          "function_name": "encode_problem_and_student_input",
          "function_prototype": "",
          "line": 399,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1020,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor_task/api_helper.py",
          "function_name": "encode_entrance_exam_and_student_input",
          "function_prototype": "",
          "line": 421,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1021,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor_task/models.py",
          "function_name": "path_to",
          "function_prototype": "",
          "line": 328,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1022,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/ssencrypt.py",
          "function_name": "generate_aes_iv",
          "function_prototype": "",
          "line": 86,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1023,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the cryptography.hazmat.primitives.hashes.SHA1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/ssencrypt.py",
          "function_name": "rsa_encrypt",
          "function_prototype": "",
          "line": 123,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1024,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the cryptography.hazmat.primitives.hashes.SHA1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/ssencrypt.py",
          "function_name": "rsa_decrypt",
          "function_prototype": "",
          "line": 138,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1025,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/features/course_experience/course_updates.py",
          "function_name": "_calculate_update_hash",
          "function_prototype": "",
          "line": 21,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1026,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cms/djangoapps/contentstore/views/course.py",
          "function_name": "assign_textbook_id",
          "function_prototype": "",
          "line": 1503,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1027,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cms/djangoapps/contentstore/views/course.py",
          "function_name": "assign_textbook_id",
          "function_prototype": "",
          "line": 1506,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1028,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cms/djangoapps/models/settings/course_grading.py",
          "function_name": "hash_grading_policy",
          "function_prototype": "",
          "line": 370,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1029,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/student/tests/test_models.py",
          "function_name": "test_generate_enrollment_status_hash",
          "function_prototype": "",
          "line": 74,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1030,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/student/tests/test_models.py",
          "function_name": "test_generate_enrollment_status_hash",
          "function_prototype": "",
          "line": 92,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1031,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/student/tests/test_models.py",
          "function_name": "test_generate_enrollment_status_hash",
          "function_prototype": "",
          "line": 103,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1032,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "295",
      "display_text": "\u003cspan\u003eIn this codepath (requests.post), strict verification of the SSL/TLS certificate chain is disabled.  Failing to validate the certificate chain leaves the connection vulnerable to man-in-the-middle attacks.\u003c/span\u003e \u003cspan\u003eAlways enable strict validation of certificates when using SSL/TLS.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/295.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/terrain/stubs/lti.py",
          "function_name": "_send_graded_result",
          "function_prototype": "",
          "line": 137,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1033,
      "issue_type": "Improper Certificate Validation",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "improper_cert_validation_python_295"
    },
    {
      "cwe_id": "295",
      "display_text": "\u003cspan\u003eIn this codepath (requests.put), strict verification of the SSL/TLS certificate chain is disabled.  Failing to validate the certificate chain leaves the connection vulnerable to man-in-the-middle attacks.\u003c/span\u003e \u003cspan\u003eAlways enable strict validation of certificates when using SSL/TLS.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/295.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/terrain/stubs/lti.py",
          "function_name": "_send_lti2",
          "function_prototype": "",
          "line": 190,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1034,
      "issue_type": "Improper Certificate Validation",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "improper_cert_validation_python_295"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/terrain/stubs/lti.py",
          "function_name": "_oauth_sign",
          "function_prototype": "",
          "line": 264,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1035,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/capa/capa/xqueue_interface.py",
          "function_name": "make_hashkey",
          "function_prototype": "",
          "line": 28,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1036,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/sandbox-packages/loncapa/loncapa_check.py",
          "function_name": "lc_random",
          "function_prototype": "",
          "line": 20,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1037,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/capa_base.py",
          "function_name": "randomization_bin",
          "function_prototype": "",
          "line": 88,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1038,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/error_module.py",
          "function_name": "_construct",
          "function_prototype": "",
          "line": 104,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1039,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/graders.py",
          "function_name": "grade",
          "function_prototype": "",
          "line": 384,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1040,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/graders.py",
          "function_name": "grade",
          "function_prototype": "",
          "line": 385,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1041,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/library_tools.py",
          "function_name": "generate_block_key",
          "function_prototype": "",
          "line": 249,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1042,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/lti_2_util.py",
          "function_name": "_log_correct_authorization_header",
          "function_prototype": "",
          "line": 108,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1043,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/lti_module.py",
          "function_name": "verify_oauth_body_sign",
          "function_prototype": "",
          "line": 906,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1044,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/randomize_module.py",
          "function_name": "child",
          "function_prototype": "",
          "line": 79,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1045,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/static_content.py",
          "function_name": "_write_styles",
          "function_prototype": "",
          "line": 163,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1046,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/static_content.py",
          "function_name": "_write_js",
          "function_prototype": "",
          "line": 212,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1047,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/static_content.py",
          "function_name": "_write_files",
          "function_prototype": "",
          "line": 262,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1048,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/badges/tests/factories.py",
          "function_prototype": "",
          "line": 64,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1049,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/course_api/tests/test_api.py",
          "function_name": "test_filter_by_org",
          "function_prototype": "",
          "line": 184,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1050,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/course_api/tests/test_views.py",
          "function_name": "test_filter_by_org",
          "function_prototype": "",
          "line": 172,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1051,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/grades/tests/test_models.py",
          "function_name": "test_creation",
          "function_prototype": "",
          "line": 162,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1052,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/grades/tests/test_transformer.py",
          "function_name": "test_modulestore_performance",
          "function_prototype": "",
          "line": 453,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1053,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/tests/test_api.py",
          "function_name": "setup_fake_email_info",
          "function_prototype": "",
          "line": 3651,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1054,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/tests/test_api.py",
          "function_name": "setup_fake_email_info",
          "function_prototype": "",
          "line": 3653,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1055,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/tests/utils.py",
          "function_name": "__init__",
          "function_prototype": "",
          "line": 62,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1056,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/tests/utils.py",
          "function_name": "__init__",
          "function_prototype": "",
          "line": 63,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1057,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/tests/utils.py",
          "function_name": "__init__",
          "function_prototype": "",
          "line": 64,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1058,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/tests/utils.py",
          "function_name": "__init__",
          "function_prototype": "",
          "line": 65,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1059,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/tests/utils.py",
          "function_name": "__init__",
          "function_prototype": "",
          "line": 66,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1060,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "generate_random_string",
          "function_prototype": "",
          "line": 460,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1061,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/lib/xblock_utils/__init__.py",
          "function_name": "hash_resource",
          "function_prototype": "",
          "line": 547,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1062,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/student/management/commands/assigngroups.py",
          "function_name": "handle",
          "function_prototype": "",
          "line": 89,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1063,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "201",
      "display_text": "\u003cspan\u003eThe buffer to be sent by requests.put() was not zeroed out before being populated with data.  This can cause information leakage if, for example, the buffer contains a struct for which only certain elements were assigned values.  The uninitialized elements would contain whatever data was previously in that memory location.  Sensitive information from previously allocated variables could be leaked when the buffer is sent over the network.\u003c/span\u003e \u003cspan\u003eEnsure that all struct elements are initialized or zeroed before being sent.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/201.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Information-Leakage\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/terrain/stubs/tests/test_http.py",
          "function_name": "test_unknown_path",
          "function_prototype": "",
          "line": 66,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1064,
      "issue_type": "Information Exposure Through Sent Data",
      "issue_type_id": "sink",
      "severity": 2,
      "title": "send_info_leak_python_201"
    },
    {
      "cwe_id": "201",
      "display_text": "\u003cspan\u003eThe buffer to be sent by requests.get() was not zeroed out before being populated with data.  This can cause information leakage if, for example, the buffer contains a struct for which only certain elements were assigned values.  The uninitialized elements would contain whatever data was previously in that memory location.  Sensitive information from previously allocated variables could be leaked when the buffer is sent over the network.\u003c/span\u003e \u003cspan\u003eEnsure that all struct elements are initialized or zeroed before being sent.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/201.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Information-Leakage\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/terrain/stubs/tests/test_video.py",
          "function_name": "test_get_hls_manifest",
          "function_prototype": "",
          "line": 45,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1065,
      "issue_type": "Information Exposure Through Sent Data",
      "issue_type_id": "sink",
      "severity": 2,
      "title": "send_info_leak_python_201"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/capa/capa/safe_exec/safe_exec.py",
          "function_name": "safe_exec",
          "function_prototype": "",
          "line": 127,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1066,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/xml.py",
          "function_name": "fallback_name",
          "function_prototype": "",
          "line": 120,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1067,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/tests/test_capa_module.py",
          "function_name": "test_should_enable_submit_button",
          "function_prototype": "",
          "line": 1328,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1068,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/tests/test_capa_module.py",
          "function_name": "test_should_show_reset_button",
          "function_prototype": "",
          "line": 1370,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1069,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/tests/test_capa_module.py",
          "function_name": "test_should_show_save_button",
          "function_prototype": "",
          "line": 1414,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1070,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/tests/test_capa_module.py",
          "function_name": "test_should_show_save_button_force_save_button",
          "function_prototype": "",
          "line": 1471,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1071,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/tests/test_capa_module.py",
          "function_name": "test_get_problem_html",
          "function_prototype": "",
          "line": 1502,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1072,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/tests/test_capa_module.py",
          "function_name": "test_get_problem_html",
          "function_prototype": "",
          "line": 1503,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1073,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/tests/test_capa_module.py",
          "function_name": "test_get_problem_html",
          "function_prototype": "",
          "line": 1504,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1074,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/test/acceptance/tests/lms/test_problem_types.py",
          "function_name": "answer_problem",
          "function_prototype": "",
          "line": 634,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1075,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/test/acceptance/tests/lms/test_problem_types.py",
          "function_name": "answer_problem",
          "function_prototype": "",
          "line": 775,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1076,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/test/acceptance/tests/lms/test_problem_types.py",
          "function_name": "answer_problem",
          "function_prototype": "",
          "line": 781,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1077,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "upload",
          "function_prototype": "",
          "line": 764,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1078,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/rest_api/tests/utils.py",
          "function_name": "get_expected_user_profile",
          "function_prototype": "",
          "line": 533,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1079,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/grades/management/commands/compute_grades.py",
          "function_name": "_shuffled_task_kwargs",
          "function_prototype": "",
          "line": 109,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1080,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/content/block_structure/transformer_registry.py",
          "function_name": "get_write_version_hash",
          "function_prototype": "",
          "line": 47,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1081,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/user_api/accounts/image_helpers.py",
          "function_name": "_make_profile_image_name",
          "function_prototype": "",
          "line": 39,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1082,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/lib/xblock_builtin/xblock_discussion/tests.py",
          "function_name": "_random_string",
          "function_prototype": "",
          "line": 41,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1083,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/capa/capa/safe_exec/tests/test_safe_exec.py",
          "function_name": "hash_obj",
          "function_prototype": "",
          "line": 268,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1084,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "coin_flip",
          "function_prototype": "",
          "line": 33,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1085,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "asset_type",
          "function_prototype": "",
          "line": 44,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1086,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "filename",
          "function_prototype": "",
          "line": 56,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1087,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "filename",
          "function_prototype": "",
          "line": 57,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1088,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "filename",
          "function_prototype": "",
          "line": 58,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1089,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "pathname",
          "function_prototype": "",
          "line": 67,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1090,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "pathname",
          "function_prototype": "",
          "line": 68,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1091,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "pathname",
          "function_prototype": "",
          "line": 69,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1092,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "fields",
          "function_prototype": "",
          "line": 90,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1093,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "fields",
          "function_prototype": "",
          "line": 92,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1094,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "user_id",
          "function_prototype": "",
          "line": 100,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1095,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "versions",
          "function_prototype": "",
          "line": 107,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1096,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "date_and_time",
          "function_prototype": "",
          "line": 123,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1097,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/perf_tests/generate_asset_xml.py",
          "function_name": "contenttype",
          "function_prototype": "",
          "line": 131,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1098,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.sha1() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/split_mongo/split.py",
          "function_name": "_copy_from_template",
          "function_prototype": "",
          "line": 2606,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1099,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/tests/test_split_migrator.py",
          "function_name": "create_random_units",
          "function_prototype": "",
          "line": 140,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1100,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/xmodule/xmodule/modulestore/tests/test_split_migrator.py",
          "function_name": "create_random_units",
          "function_prototype": "",
          "line": 142,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1101,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"http://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/oauth_dispatch/management/commands/generate_jwt_signing_key.py",
          "function_name": "_generate_key_id",
          "function_prototype": "",
          "line": 121,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1102,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "RANDMSG_python_331"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/user_api/accounts/tests/test_image_helpers.py",
          "function_name": "test_get_profile_image_urls",
          "function_prototype": "",
          "line": 69,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1103,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the hashlib.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/user_api/accounts/tests/test_views.py",
          "function_name": "_verify_profile_image_data",
          "function_prototype": "",
          "line": 128,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1104,
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "issue_type_id": "sink",
      "severity": 3,
      "title": "weak_hash_use_python_327"
    },
    {
      "cwe_id": "183",
      "display_text": "\u003cspan\u003eThe django.ALLOWED_HOSTS() property is configured with atleast one value such as using wildcards(*), which might allow this application to be accessed by an untrusted domain. This could open up your application to same kinds of attacks as XSS, or arbitrary execution of untrusted javascript on your servers.\u003c/span\u003e\u003cspan\u003eMake sure, domains allowed to communicate with your applications, are carefully allowlisted and configured accordingly.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/183.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cms/envs/production.py",
          "function_prototype": "",
          "line": 191,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1105,
      "issue_type": "Permissive List of Allowed Inputs",
      "issue_type_id": "t",
      "severity": 3,
      "title": "permissive_whitelist_python_183"
    },
    {
      "cwe_id": "215",
      "display_text": "\u003cspan\u003eEnabling django.DEBUG() property exposes debug information that may expose sensitive information which an attacker can use to fingerprint the application. This information can be used by an attacker in executing other more sophisticated attacks and can also enable the attacker to target known vulnerabilities in application components.\u003c/span\u003e\u003cspan\u003eMake sure, () property is disabled, in production configurations.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/215.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/envs/local.py",
          "function_prototype": "",
          "line": 77,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1106,
      "issue_type": "Information Exposure Through Debug Information",
      "issue_type_id": "t",
      "severity": 2,
      "title": "exposed_debug_python_215"
    },
    {
      "cwe_id": "215",
      "display_text": "\u003cspan\u003eEnabling django.DEBUG() property exposes debug information that may expose sensitive information which an attacker can use to fingerprint the application. This information can be used by an attacker in executing other more sophisticated attacks and can also enable the attacker to target known vulnerabilities in application components.\u003c/span\u003e\u003cspan\u003eMake sure, () property is disabled, in production configurations.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/215.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/envs/local_production.py",
          "function_prototype": "",
          "line": 9,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1107,
      "issue_type": "Information Exposure Through Debug Information",
      "issue_type_id": "t",
      "severity": 2,
      "title": "exposed_debug_python_215"
    },
    {
      "cwe_id": "183",
      "display_text": "\u003cspan\u003eThe django.ALLOWED_HOSTS() property is configured with atleast one value such as using wildcards(*), which might allow this application to be accessed by an untrusted domain. This could open up your application to same kinds of attacks as XSS, or arbitrary execution of untrusted javascript on your servers.\u003c/span\u003e\u003cspan\u003eMake sure, domains allowed to communicate with your applications, are carefully allowlisted and configured accordingly.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/183.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/envs/production.py",
          "function_prototype": "",
          "line": 210,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1108,
      "issue_type": "Permissive List of Allowed Inputs",
      "issue_type_id": "t",
      "severity": 3,
      "title": "permissive_whitelist_python_183"
    },
    {
      "cwe_id": "99",
      "display_text": "\u003cspan\u003eThis call to requests.get() contains user-supplied input.  This call is performing a potentially sensitive operation with parameters that should not be manipulable by unauthorized users.  Depending on the operation, persistent server parameters could be set or the application\u0027s data sources could be manipulated.  \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  In general, avoid executing code derived from untrusted input.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/99.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "scripts/xblock/xblock_counts.py",
          "function_name": "_get_course_data_summary",
          "function_prototype": "",
          "line": 101,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1109,
      "issue_type": "Improper Control of Resource Identifiers (\u0027Resource Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "resource_injection_python_99"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/rss_proxy/views.py",
          "function_name": "proxy",
          "function_prototype": "",
          "line": 37,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1110,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return \u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/terrain/stubs/http.py",
          "function_name": "get_params",
          "function_prototype": "",
          "line": 132,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1111,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return path\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/terrain/stubs/http.py",
          "function_name": "path_only",
          "function_prototype": "",
          "line": 145,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1112,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return path\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/terrain/stubs/http.py",
          "function_name": "path_only",
          "function_prototype": "",
          "line": 147,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1113,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/capa/capa/checker.py",
          "function_name": "main",
          "function_prototype": "",
          "line": 49,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1114,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.error() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/lib/capa/capa/checker.py",
          "function_name": "main",
          "function_prototype": "",
          "line": 54,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1115,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return rest_framework.response.Response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/content_libraries/views.py",
          "function_name": "put",
          "function_prototype": "",
          "line": 300,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1116,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return rest_framework.response.Response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/content_libraries/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 313,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1117,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/program_enrollments/management/commands/migrate_saml_uids.py",
          "function_name": "handle",
          "function_prototype": "",
          "line": 111,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1118,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/program_enrollments/management/commands/migrate_saml_uids.py",
          "function_name": "handle",
          "function_prototype": "",
          "line": 124,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1119,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/program_enrollments/management/commands/migrate_saml_uids.py",
          "function_name": "handle",
          "function_prototype": "",
          "line": 118,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1120,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.debug() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/tests/mock_cs_server/mock_cs_server.py",
          "function_name": "do_PUT",
          "function_prototype": "",
          "line": 79,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1121,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return super.dispatch\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cms/djangoapps/maintenance/views.py",
          "function_name": "dispatch",
          "function_prototype": "",
          "line": 239,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1122,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/course_modes/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 96,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1123,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/course_modes/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 104,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1124,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/course_modes/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 236,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1125,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/course_modes/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 205,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1126,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return get\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/course_modes/views.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 263,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1127,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return get\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/course_modes/views.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 301,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1128,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return get\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/course_modes/views.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 306,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1129,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/third_party_auth/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 152,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1130,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 248,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1131,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 280,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1132,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 285,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1133,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return redirect_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 344,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1134,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 426,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1135,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return super.dispatch\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "dispatch",
          "function_prototype": "",
          "line": 815,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1136,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 844,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1137,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 850,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1138,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 864,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1139,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return django.contrib.auth.views.redirect_to_login\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/index.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 112,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1140,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return views.CourseTabView.handle_exceptions\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/index.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 153,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1141,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return render\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/index.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 151,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1142,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 862,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1143,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 881,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1144,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 876,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1145,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/views/certificate.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 37,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1146,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/views/course_entitlements.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 34,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1147,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/views/enrollments.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 44,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1148,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/views/feature_based_enrollments.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 36,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1149,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/views/manage_user.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 32,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1150,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/views/program_enrollments.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 65,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1151,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/support/views/program_enrollments.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 169,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1152,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/tests/fake_software_secure.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 29,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1153,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/api_admin/views.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 142,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1154,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/api_admin/views.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 185,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1155,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/api_admin/views.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 224,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1156,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return django.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/features/course_bookmarks/views/course_bookmarks.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 60,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1157,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/notification_prefs/views.py",
          "function_name": "ajax_status",
          "function_prototype": "",
          "line": 168,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1158,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/notification_prefs/views.py",
          "function_name": "set_subscription",
          "function_prototype": "",
          "line": 203,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1159,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/notification_prefs/views.py",
          "function_name": "set_subscription",
          "function_prototype": "",
          "line": 206,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1160,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.error() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/branding/views.py",
          "function_name": "index",
          "function_prototype": "",
          "line": 72,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1161,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.student.views.index\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/branding/views.py",
          "function_name": "index",
          "function_prototype": "",
          "line": 70,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1162,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "jump_to",
          "function_prototype": "",
          "line": 426,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1163,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "jump_to_id",
          "function_prototype": "",
          "line": 376,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1164,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return jump_to\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "jump_to_id",
          "function_prototype": "",
          "line": 384,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1165,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseBadRequest() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "render_xblock",
          "function_prototype": "",
          "line": 1720,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1166,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "render_xblock",
          "function_prototype": "",
          "line": 1781,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1167,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "render_xblock",
          "function_prototype": "",
          "line": 1815,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1168,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return lms.djangoapps.courseware.views.views.courses\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/branding/views.py",
          "function_name": "courses",
          "function_prototype": "",
          "line": 103,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1169,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "course_about",
          "function_prototype": "",
          "line": 999,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1170,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "course_about",
          "function_prototype": "",
          "line": 903,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1171,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return rest_framework.response.Response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "yt_video_metadata",
          "function_prototype": "",
          "line": 303,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1172,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "course_info",
          "function_prototype": "",
          "line": 494,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1173,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "course_info",
          "function_prototype": "",
          "line": 569,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1174,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "course_info",
          "function_prototype": "",
          "line": 471,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1175,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "syllabus",
          "function_prototype": "",
          "line": 815,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1176,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "course_survey",
          "function_prototype": "",
          "line": 1541,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1177,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return lms.djangoapps.survey.views.view_student_survey\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "course_survey",
          "function_prototype": "",
          "line": 1543,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1178,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/staticbook/views.py",
          "function_name": "index",
          "function_prototype": "",
          "line": 35,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1179,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/staticbook/views.py",
          "function_name": "pdf_index",
          "function_prototype": "",
          "line": 118,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1180,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/staticbook/views.py",
          "function_name": "html_index",
          "function_prototype": "",
          "line": 165,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1181,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return _progress\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "progress",
          "function_prototype": "",
          "line": 1121,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1182,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "dates",
          "function_prototype": "",
          "line": 1102,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1183,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "program_marketing",
          "function_prototype": "",
          "line": 1025,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1184,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/instructor_dashboard.py",
          "function_name": "instructor_dashboard_2",
          "function_prototype": "",
          "line": 250,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1185,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.error() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/instructor_dashboard.py",
          "function_name": "instructor_dashboard_2",
          "function_prototype": "",
          "line": 167,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1186,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.error() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/instructor_dashboard.py",
          "function_name": "instructor_dashboard_2",
          "function_prototype": "",
          "line": 112,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1187,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "get_course_lti_endpoints",
          "function_prototype": "",
          "line": 1522,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1188,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "generate_user_cert",
          "function_prototype": "",
          "line": 1603,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1189,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "generate_user_cert",
          "function_prototype": "",
          "line": 1614,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1190,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "generate_user_cert",
          "function_prototype": "",
          "line": 1609,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1191,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "generate_user_cert",
          "function_prototype": "",
          "line": 1588,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1192,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "submission_history",
          "function_prototype": "",
          "line": 1406,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1193,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "submission_history",
          "function_prototype": "",
          "line": 1391,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1194,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "submission_history",
          "function_prototype": "",
          "line": 1434,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1195,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor_task/views.py",
          "function_name": "instructor_task_status",
          "function_prototype": "",
          "line": 87,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1196,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/debug/views.py",
          "function_name": "run_python",
          "function_prototype": "",
          "line": 47,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1197,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/debug/views.py",
          "function_name": "show_parameters",
          "function_prototype": "",
          "line": 58,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1198,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/courseware/views/views.py",
          "function_name": "financial_assistance_form",
          "function_prototype": "",
          "line": 2004,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1199,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "common/djangoapps/course_modes/views.py",
          "function_name": "create_mode",
          "function_prototype": "",
          "line": 377,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1200,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/bulk_email/views.py",
          "function_name": "opt_out_email_updates",
          "function_prototype": "",
          "line": 56,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1201,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "dashboard",
          "function_prototype": "",
          "line": 128,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1202,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "dashboard",
          "function_prototype": "",
          "line": 161,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1203,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "create_ccx",
          "function_prototype": "",
          "line": 178,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1204,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "create_ccx",
          "function_prototype": "",
          "line": 187,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1205,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "create_ccx",
          "function_prototype": "",
          "line": 244,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1206,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "create_ccx",
          "function_prototype": "",
          "line": 242,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1207,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "save_ccx",
          "function_prototype": "",
          "line": 341,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1208,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "set_grading_policy",
          "function_prototype": "",
          "line": 370,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1209,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "set_grading_policy",
          "function_prototype": "",
          "line": 564,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1210,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "save_ccx",
          "function_prototype": "",
          "line": 343,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1211,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "ccx_schedule",
          "function_prototype": "",
          "line": 458,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1212,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "ccx_students_management",
          "function_prototype": "",
          "line": 482,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1213,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "ccx_gradebook",
          "function_prototype": "",
          "line": 500,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1214,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/ccx/views.py",
          "function_name": "set_grading_policy",
          "function_prototype": "",
          "line": 376,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1215,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return lms.djangoapps.discussion.django_comment_client.utils.JsonResponse\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/views.py",
          "function_name": "followed_threads",
          "function_prototype": "",
          "line": 669,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1216,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return django.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/views.py",
          "function_name": "followed_threads",
          "function_prototype": "",
          "line": 690,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1217,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return lms.djangoapps.discussion.django_comment_client.utils.JsonResponse\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/views.py",
          "function_name": "user_profile",
          "function_prototype": "",
          "line": 596,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1218,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return tab_view.get\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/views.py",
          "function_name": "user_profile",
          "function_prototype": "",
          "line": 610,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1219,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return tab_view.get\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/views.py",
          "function_name": "single_thread",
          "function_prototype": "",
          "line": 348,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1220,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return lms.djangoapps.discussion.django_comment_client.utils.JsonResponse\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/views.py",
          "function_name": "single_thread",
          "function_prototype": "",
          "line": 341,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1221,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return lms.djangoapps.discussion.django_comment_client.utils.JsonResponse\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/views.py",
          "function_name": "inline_discussion",
          "function_prototype": "",
          "line": 243,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1222,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return tab_view.get\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/views.py",
          "function_name": "forum_form_discussion",
          "function_prototype": "",
          "line": 294,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1223,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return lms.djangoapps.discussion.django_comment_client.utils.JsonResponse\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/views.py",
          "function_name": "forum_form_discussion",
          "function_prototype": "",
          "line": 284,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1224,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/edxnotes/views.py",
          "function_name": "edxnotes",
          "function_prototype": "",
          "line": 86,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1225,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/edxnotes/views.py",
          "function_name": "notes",
          "function_prototype": "",
          "line": 179,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1226,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/edxnotes/views.py",
          "function_name": "get_token",
          "function_prototype": "",
          "line": 187,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1227,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/edxnotes/views.py",
          "function_name": "edxnotes_visibility",
          "function_prototype": "",
          "line": 211,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1228,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/learner_dashboard/views.py",
          "function_name": "program_listing",
          "function_prototype": "",
          "line": 28,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1229,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/learner_dashboard/views.py",
          "function_name": "program_details",
          "function_prototype": "",
          "line": 49,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1230,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return render_courseware\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/lti_provider/views.py",
          "function_name": "lti_launch",
          "function_prototype": "",
          "line": 98,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1231,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.error() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/lti_provider/views.py",
          "function_name": "lti_launch",
          "function_prototype": "",
          "line": 79,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1232,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.utils.safestring.mark_safe() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/static_template_view/views.py",
          "function_name": "render",
          "function_prototype": "",
          "line": 67,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1233,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.utils.safestring.mark_safe() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/static_template_view/views.py",
          "function_name": "render",
          "function_prototype": "",
          "line": 69,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1234,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return result\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/static_template_view/views.py",
          "function_name": "render",
          "function_prototype": "",
          "line": 71,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1235,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseNotFound() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/static_template_view/views.py",
          "function_name": "render_404",
          "function_prototype": "",
          "line": 111,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1236,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseServerError() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/static_template_view/views.py",
          "function_name": "render_500",
          "function_prototype": "",
          "line": 125,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1237,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return resp\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/static_template_view/views.py",
          "function_name": "render_press_release",
          "function_prototype": "",
          "line": 94,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1238,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return view_student_survey\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/survey/views.py",
          "function_name": "view_survey",
          "function_prototype": "",
          "line": 31,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1239,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/survey/views.py",
          "function_name": "submit_answers",
          "function_prototype": "",
          "line": 114,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1240,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "create_order",
          "function_prototype": "",
          "line": 777,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1241,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "create_order",
          "function_prototype": "",
          "line": 782,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1242,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.exception() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "create_order",
          "function_prototype": "",
          "line": 769,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1243,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1127,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1244,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.error() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1113,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1245,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseBadRequest() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1114,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1246,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.debug() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1136,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1247,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.debug() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1144,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1248,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.debug() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1162,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1249,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.error() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1164,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1250,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.error() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1166,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1251,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseBadRequest() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1167,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1252,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.exception() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1082,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1253,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseBadRequest() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1083,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1254,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.error() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1086,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1255,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseBadRequest() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/verify_student/views.py",
          "function_name": "results_callback",
          "function_prototype": "",
          "line": 1087,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1256,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseBadRequest() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "students_update_enrollment",
          "function_prototype": "",
          "line": 715,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1257,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to csv.reader() contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "register_and_enroll_students",
          "function_prototype": "",
          "line": 330,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1258,
      "issue_type": "External Control of File Name or Path",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "path_manip_python_73"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "register_and_enroll_students",
          "function_prototype": "",
          "line": 395,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1259,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "register_and_enroll_students",
          "function_prototype": "",
          "line": 397,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1260,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "register_and_enroll_students",
          "function_prototype": "",
          "line": 427,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1261,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "generate_bulk_certificate_exceptions",
          "function_prototype": "",
          "line": 2845,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1262,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "generate_bulk_certificate_exceptions",
          "function_prototype": "",
          "line": 2850,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1263,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "generate_bulk_certificate_exceptions",
          "function_prototype": "",
          "line": 2854,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1264,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "generate_bulk_certificate_exceptions",
          "function_prototype": "",
          "line": 2858,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1265,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "certificate_invalidation_view",
          "function_prototype": "",
          "line": 2903,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1266,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.error() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "modify_access",
          "function_prototype": "",
          "line": 889,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1267,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseBadRequest() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "modify_access",
          "function_prototype": "",
          "line": 890,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1268,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseBadRequest() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "modify_access",
          "function_prototype": "",
          "line": 907,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1269,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseBadRequest() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "bulk_beta_modify_access",
          "function_prototype": "",
          "line": 800,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1270,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return lms.djangoapps.instructor_analytics.csvs.create_csv_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "get_issued_certificates",
          "function_prototype": "",
          "line": 1095,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1271,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return _create_error_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "override_problem_score",
          "function_prototype": "",
          "line": 1725,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1272,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return _create_error_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "override_problem_score",
          "function_prototype": "",
          "line": 1720,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1273,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return _create_error_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "override_problem_score",
          "function_prototype": "",
          "line": 1746,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1274,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return _create_error_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "override_problem_score",
          "function_prototype": "",
          "line": 1749,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1275,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseBadRequest() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "list_forum_members",
          "function_prototype": "",
          "line": 2123,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1276,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponseBadRequest() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "update_forum_role_membership",
          "function_prototype": "",
          "line": 2281,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1277,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.exception() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "send_email",
          "function_prototype": "",
          "line": 2218,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1278,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "send_email",
          "function_prototype": "",
          "line": 2176,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1279,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return common.djangoapps.edxmako.shortcuts.render_to_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/gradebook_api.py",
          "function_name": "spoc_gradebook",
          "function_prototype": "",
          "line": 116,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1280,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "generate_example_certificates",
          "function_prototype": "",
          "line": 2463,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1281,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/Open_redirect\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "enable_certificate_generation",
          "function_prototype": "",
          "line": 2481,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1282,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "url_redirection_python_601"
    },
    {
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to csv.reader() contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/instructor/views/api.py",
          "function_name": "generate_bulk_certificate_exceptions",
          "function_prototype": "",
          "line": 2820,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1283,
      "issue_type": "External Control of File Name or Path",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "path_manip_python_73"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return view_func\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/api_admin/decorators.py",
          "function_name": "api_access_enabled_or_404",
          "function_prototype": "",
          "line": 19,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1284,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return rest_framework.response.Response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/olx_rest_api/views.py",
          "function_name": "get_block_olx",
          "function_prototype": "",
          "line": 81,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1285,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/olx_rest_api/views.py",
          "function_name": "get_block_exportfs_file",
          "function_prototype": "",
          "line": 115,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1286,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/olx_rest_api/views.py",
          "function_name": "get_block_exportfs_file",
          "function_prototype": "",
          "line": 117,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1287,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.HttpResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "upload",
          "function_prototype": "",
          "line": 796,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1288,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return ajax_content_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "update_thread",
          "function_prototype": "",
          "line": 348,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1289,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return _create_comment\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "create_comment",
          "function_prototype": "",
          "line": 413,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1290,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return result\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "vote_for_thread",
          "function_prototype": "",
          "line": 572,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1291,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return _vote_or_unvote\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "undo_vote_for_thread",
          "function_prototype": "",
          "line": 583,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1292,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return ajax_content_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "update_comment",
          "function_prototype": "",
          "line": 449,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1293,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return _create_comment\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "create_sub_comment",
          "function_prototype": "",
          "line": 501,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1294,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return result\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "vote_for_comment",
          "function_prototype": "",
          "line": 548,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1295,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return _vote_or_unvote\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "undo_vote_for_comment",
          "function_prototype": "",
          "line": 559,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1296,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return ajax_content_response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "create_thread",
          "function_prototype": "",
          "line": 307,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1297,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.debug() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "lms/djangoapps/discussion/django_comment_client/base/views.py",
          "function_name": "create_thread",
          "function_prototype": "",
          "line": 237,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1298,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "log_forging_python_117"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return rest_framework.response.Response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/xblock/rest_api/views.py",
          "function_name": "block_metadata",
          "function_prototype": "",
          "line": 50,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1299,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return rest_framework.response.Response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/xblock/rest_api/views.py",
          "function_name": "render_block_view",
          "function_prototype": "",
          "line": 65,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1300,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return rest_framework.response.Response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/xblock/rest_api/views.py",
          "function_name": "get_handler_url",
          "function_prototype": "",
          "line": 79,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1301,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to \u0027return response\u0027 contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"http://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"http://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"http://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/go/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "openedx/core/djangoapps/xblock/rest_api/views.py",
          "function_name": "xblock_handler",
          "function_prototype": "",
          "line": 136,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1302,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "title": "basic_xss_python_80"
    },
    {
      "title": "java.util.Random.nextInt",
      "issue_id": 1006,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "reliability",
      "issue_type": "Insufficient Entropy",
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "protex/VirtualTable.java",
          "line": 96,
          "function_name": "getRandom",
          "qualified_function_name": "protex.VirtualTable.getRandom",
          "function_prototype": "AminoAcid [] getRandom(int, int)",
          "scope": "protex.VirtualTable"
        }
      },
      "flaw_match": {
        "procedure_hash": "4129766217",
        "prototype_hash": "1091701860",
        "flaw_hash": "2732397370",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3839803551",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/331.html"
    },
    {
      "title": "java.util.Random.nextBoolean",
      "issue_id": 1004,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "reliability",
      "issue_type": "Insufficient Entropy",
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "protex/VirtualTable.java",
          "line": 97,
          "function_name": "getRandom",
          "qualified_function_name": "protex.VirtualTable.getRandom",
          "function_prototype": "AminoAcid [] getRandom(int, int)",
          "scope": "protex.VirtualTable"
        }
      },
      "flaw_match": {
        "procedure_hash": "4129766217",
        "prototype_hash": "1091701860",
        "flaw_hash": "1430449408",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/331.html"
    },
    {
      "title": "java.util.Random.nextDouble",
      "issue_id": 1005,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "reliability",
      "issue_type": "Insufficient Entropy",
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "protex/StandardTable.java",
          "line": 192,
          "function_name": "getRandom",
          "qualified_function_name": "protex.StandardTable.getRandom",
          "function_prototype": "AminoAcid [] getRandom(int, int)",
          "scope": "protex.StandardTable"
        }
      },
      "flaw_match": {
        "procedure_hash": "2027449434",
        "prototype_hash": "1005032511",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/331.html"
    },
    {
      "title": "ProtexApplet",
      "issue_id": 1000,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "backdoor",
      "issue_type": "Inclusion of Functionality from Untrusted Control Sphere",
      "cwe_id": "829",
      "display_text": "\u003cspan\u003eThe ProtexApplet class is a Java applet. The Java Runtime Environment (JRE) has repeatedly and consistently been a source of high impact, reliably exploitable vulnerabilities, and it will likely continue to be a high-profile target. Using applets presents no risk to the server, but requiring end users to have the JRE installed puts them at undue risk.\u003c/span\u003e \u003cspan\u003eWork toward removing the application\u0027s dependence on Java applets.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/829.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "protex/ProtexApplet.java",
          "line": 14,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "UNKNOWN",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1528952099",
        "prototype_hash": "0",
        "flaw_hash": "1528952099",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/829.html"
    },
    {
      "title": "java.io.FileWriter.!operator_javanewinit",
      "issue_id": 1003,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to java.io.FileWriter.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data. The tainted data originated from an earlier call to java.lang.System.getProperty.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "protex/Protex.java",
          "line": 355,
          "function_name": "actionPerformed",
          "qualified_function_name": "protex.Protex$6.actionPerformed",
          "function_prototype": "void actionPerformed(java.awt.event.ActionEvent)",
          "scope": "protex.Protex$6"
        }
      },
      "flaw_match": {
        "procedure_hash": "4085413145",
        "prototype_hash": "3028357084",
        "flaw_hash": "3970901000",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1060848819",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "684345015",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/73.html"
    },
    {
      "title": "java.io.FileOutputStream.!operator_javanewinit",
      "issue_id": 1002,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to java.io.FileOutputStream.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable jpegFileName. The tainted data originated from an earlier call to java.lang.System.getProperty.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "protex/Protex.java",
          "line": 385,
          "function_name": "actionPerformed",
          "qualified_function_name": "protex.Protex$6.actionPerformed",
          "function_prototype": "void actionPerformed(java.awt.event.ActionEvent)",
          "scope": "protex.Protex$6"
        }
      },
      "flaw_match": {
        "procedure_hash": "4085413145",
        "prototype_hash": "3028357084",
        "flaw_hash": "2893105776",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/73.html"
    },
    {
      "title": "java.io.File.!operator_javanewinit",
      "issue_id": 1001,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to java.io.File.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data. The tainted data originated from an earlier call to java.lang.System.getProperty.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "protex/Protex.java",
          "line": 634,
          "function_name": "saveToChosenFile",
          "qualified_function_name": "protex.Protex.saveToChosenFile",
          "function_prototype": "void saveToChosenFile(java.lang.Object  [])",
          "scope": "protex.Protex"
        }
      },
      "flaw_match": {
        "procedure_hash": "95002664",
        "prototype_hash": "1205191713",
        "flaw_hash": "3823144438",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1744794041",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2121025543",
        "cause_hash2_ordinal": "1"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/73.html"
    },
    {
      "title": "GenexApplet",
      "issue_id": 1000,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "backdoor",
      "issue_type": "Inclusion of Functionality from Untrusted Control Sphere",
      "cwe_id": "829",
      "display_text": "\u003cspan\u003eThe GenexApplet class is a Java applet. The Java Runtime Environment (JRE) has repeatedly and consistently been a source of high impact, reliably exploitable vulnerabilities, and it will likely continue to be a high-profile target. Using applets presents no risk to the server, but requiring end users to have the JRE installed puts them at undue risk.\u003c/span\u003e \u003cspan\u003eWork toward removing the application\u0027s dependence on Java applets.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/829.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "GX/GenexApplet.java",
          "line": 19,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "UNKNOWN",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3409839109",
        "prototype_hash": "0",
        "flaw_hash": "3409839109",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/829.html"
    }
  ],
  "pipeline_scan": "21.11.1-0",
  "dev_stage": "DEVELOPMENT"
}